Forest <- c(rep("A", 110), rep("B", 119), rep("C", 128))
Species <- c(rep("Mam", 21), rep("Birds", 18), rep("Bflies", 67), rep("Rep", 4),
rep("Mam", 17), rep("Birds", 36), rep("Bflies", 63), rep("Rep", 3),
rep("Mam", 22), rep("Birds", 28), rep("Bflies", 66), rep("Rep", 12)
)
View(Forest)
View(Species)
Species <- c(rep("Mam", 21), rep("Birds", 18), rep("Bflies", 67), rep("Rep", 4),
rep("Mam", 17), rep("Birds", 36), rep("Bflies", 63), rep("Rep", 3),
rep("Mam", 22), rep("Birds", 28), rep("Bflies", 66), rep("Rep", 12)
)
# Use a mosaicplot to display and explore the data
mosaicplot(~ Forest + Species, color = TRUE)
# Make a 2-way table for analysis
fspec.tab <- xtabs(~ Species + Forest)
fspec.tab # Check it!! Does it coincide with the original table??
# Do a 2-way chi-square test
chisq.test(fspec.tab)
# The analysis can also be performed using Fisher exact tests:
fisher.test(fspec.tab, workspace = 2e+07, hybrid = T) # simulate.p.values required, otherwise workspace too small
#----------------------------------------------------------#
# Template for data preparation, Home ranges and Intersections
# Version 2020.07.16
#----------------------------------------------------------#
# To do list:
# - currently none.
# ----------------------------#
# (0) Session preparation ----
# ----------------------------#
rm(list = ls()) #remove all previous info from workspace
#Set your working directory from which to import or save files
Select.Region <- "Ertingen" # Enter region name to allow setwd()
setwd(paste("Y:/Analysis habitat use/", Select.Region, "/", sep = ""))
# activate packages
library(foreign)                  # to open dbf.files
library(readxl)                   # to open excel files
library(sp)                       # commands for spatial data
library(adehabitatHR)             # needed for home range calculations
library(maptools)                 # creates shape-files
library(dplyr)                    # e.g. to generate summary data per subgroups
library(rgeos)                    # package for spatial operations like buffer, intersect etc.
library(raster)                   # provides better intersection function than rgeos
library(rgdal)                    # overall shapefile handling
# ---------------------------------------------------#
# (1) Basic settings for data import and analysis ----
# ---------------------------------------------------#
# Define name of the current study area:
Select.StudyArea <- "Ertingen" #"Kelz", "Wichterich"...
# Excel file name containing your localizations and durations:
FileName.Loc.Excel <-  "Grauammer_Verortungen_Dauern_Ertingen_2020_07_16.xlsx" # "Grauammer_Verortungen_Dauern_Mirjam_2020.07.16.xlsx"
# Shapefile name  (dbf-component) cotaining your localizations and their coordinates:
FileName.Loc.shp <- "Ertingen_Ortungen_2020_07_16_EPSG_31467.dbf"  # "Quellendorf_Lokalisation_2020_07_16_EPSG_31467.dbf"
# Shapefile name that has the cultures in study area:
FileName.Cultures <- "Ertingen_Kulturkartierung_2020_EPSG_31467" # "Quf_Kulturkartierung_2020_07_16_EPSG_31467"
# Select the sex for which to perform the analysis:
Select.sex <- "M"  #M or W. For analysis across all individuals select "all"
# Select the minimum number of localisations needed to delineate territories for analysis:
Select.MinSample.hr <- 10
# Select the minimum number of localisations needed for statistical analysis within territories:
Select.MinSample.reg <- 20 # 20 in case of behaviour = "all", 10 in case of behaviour = "foraging"; but also depending on the study area and the dataset
# Select the type of territory delineation you wish to perform:
Select.TerritoryType <- "Kernel" # "Kernel" or Kernel_MCP_inter" (WICHTERICH 2019 FEMALES AND MALES) or "MCP"
# Select the proportion of points to be included in MCPs (typically 100):
Select.Prop.MCP <- 100
# Select the proportion of points that you wish to be included in the kernel delineation (typically 95 or 90):
Select.Prop.Hull <- 95 #it has to be 65 in case of ROTTENBURG 2018 FEMALES and 85 in case of WICHTERICH 2019 MALES
# For Rottenburg 2018 F: remove territory 9 (< 0.1 ha)
# For Quellendorf 2020 M: remove territory 15 (< 0.1 ha)
# Select the types of behaviour to be analysed
Select.Behaviour <- "all" # "all" or "foraging"... implemented in section (5)
# For which year are the data?
Select.Year <- 2020
# ---------------------------------------------------#
# (2) Import and prepare data ----
# ---------------------------------------------------#
# (2.a) Open raw data files
dat_base <- read_xlsx(FileName.Loc.Excel)
if (Select.StudyArea == "Quellendorf" &  Select.Year == 2018) {
Session_Dauer_sec <- dplyr::summarise(group_by(dat_base,
Revier_ID,
Datum,
Session_Start),
Session_Dauer_sec = sum(Dauer_sec))
dat_base <- left_join(dat_base, # Add these data back into the raw data table
Session_Dauer_sec,
by = c("Revier_ID", "Datum", "Session_Start"))
dat_base$Session_Dauer_min <- dat_base$Session_Dauer_sec/60
dat_base <- dat_base[, c("Datum", "Session_Start", "Session_Dauer_min", "Revier_ID", "Ortung_ID", "Geschlecht_Alter", "Verhalten", "Dauer_sec", "X", "Y")]
}
if (Select.StudyArea == "Rottenburg" & Select.Year == 2018) {
dat_base <- dat_base[, c("Datum", "Session_Start_h", "Session_Start_min", "Session_Dauer_min", "Revier_ID", "Ortung_ID", "Geschlecht_Alter", "Verhalten", "Dauer_min", "Dauer_sec", "X", "Y", "Kultur")]
}
#subset f?r Teilgebiete KELZ und WICHTERICH
#dat_base <- subset(dat_base, dat_base$Teilgebiet == "Kelz")
#dat_base <- subset(dat_base, dat_base$Teilgebiet == "Wichterich")
#Prune dataset to the columns needed further on:
dat_base <- dat_base[, c("Datum",
"Session_Start_h",
"Session_Start_min",
"Session_Dauer_min",
"Revier_ID",
"Ortung_ID",
"Geschlecht_Alter",
"Verhalten",
"Dauer_min",
"Dauer_sec")]
dat_base <- as.data.frame(unclass(dat_base)) # converts all previous chr into factor
dat_base$Revier_ID <- as.factor(dat_base$Revier_ID)
#if sessions are shorter than 10 minutes they should be removed
#dat_base <- subset(dat_base, subset = dat_base$Session_Dauer_min >= 10 | is.na(dat_base$Session_Dauer_min))
if (!((Select.StudyArea == "Quellendorf" | Select.StudyArea == "Rottenburg") & Select.Year == 2018)) {
# next FOUR commands NOT in case of ROTTENBURG 2018 and QUELLENDORF 2018
dat_coord <- read.dbf(FileName.Loc.shp)[, c("Ortung_ID", "X", "Y")] # only those 3 columns are imported
# remove duplicates and missing values from dat_coord (!! Should NOT occur 2019/2020! If they do: Check in shapefile!!):
dat_coord <- dat_coord[!duplicated(dat_coord$Ortung_ID), ]
dat_coord <- subset(dat_coord, dat_coord$Ortung_ID != "NA")
# (2.b) Merge the coordinates (X, Y) from dat_coord into the raw data file dat_base
dat_base <- left_join(dat_base, dat_coord[, c("Ortung_ID", "X", "Y")], by = "Ortung_ID")
}
# delete NAs in and Revier_ID or in coordinates
# (= lacking matches in Ortung_ID, or behaviours like "Rundflug" or "Verloren" that have no Ortung_ID)
dat_base <- subset(dat_base, dat_base$X != is.na(dat_base$X))
dat_base <- subset(dat_base, dat_base$Revier_ID != is.na(dat_base$Revier_ID))
# rename sex-entries if necessary: m = M und w = W
levels(dat_base$Geschlecht_Alter)[levels(dat_base$Geschlecht_Alter) == "m"] <- "M"
levels(dat_base$Geschlecht_Alter)[levels(dat_base$Geschlecht_Alter) == "w"] <- "W"
# (2.c) Prune to selected sex:
if (Select.sex != "all") {
dat_sex <- subset(dat_base, dat_base$Geschlecht_Alter == Select.sex)
} else {
dat_sex <- dat_base
}
# (2.d) Prune to territories that exceed minimum sample size for territory calculation (Select.MinSample.hr):
# We first Calculate the no. of observations per territory:
N_data_territory <- dat_sex %>% dplyr::count(Revier_ID)
dat_sex <- left_join(dat_sex, N_data_territory, by = "Revier_ID")
# ... and then only maintain those with more observations:
dat_sex <- subset(dat_sex, subset = dat_sex$n >= Select.MinSample.hr)
# The levels of Revier_ID need adjustment, otherwise MCP-calculation fails
dat_sex$Revier_ID <- droplevels(as.factor(dat_sex$Revier_ID))
levels(dat_sex$Revier_ID)
if (Select.Region == "Quellendorf" & Select.Year == 2018) {
dat_sex$Dauer_min_dez <- dat_sex$Dauer_sec/60
dat_sex$Dauer_min_dez[is.na(dat_sex$Dauer_min_dez)] <- 1
dat_sex <- dat_sex[, c("Datum", "Session_Start", "Session_Dauer_min", "Revier_ID", "Ortung_ID", "X", "Y", "Geschlecht_Alter", "Verhalten", "Dauer_min_dez", "n")]
# then jump to command "coordinates"...
}
# following commands NOT for Quellendorf 2018
# (2.e) generate decimal times f?r Dauer and Session-start:
dat_sex$Dauer_min_dez <- as.numeric(dat_sex$Dauer_min) + (as.numeric(dat_sex$Dauer_sec) / 60)
dat_sex$Session_Start <- as.numeric( dat_sex$Session_Start_h) + as.numeric(dat_sex$Session_Start_min)/60
# (2.f) Localizations without observation duration (= NA) are assigned a 1 min duration:
dat_sex$Dauer_min_dez[is.na(dat_sex$Dauer_min_dez)] <- 1
# (2.g) Localizations lacking session information (= no Session_Start and no Session_Dauer) are assigned to a real recording.
# Per territory, we take the very first row entry with complete information in the dataframe dat:
df.firstRow <- plyr::ddply(dat_sex[complete.cases(dat_sex),], "Revier_ID", head, 1)
# ... and add this information as new columns into dat_sex:
dat_sex <- left_join(dat_sex, df.firstRow[ , c("Datum", "Session_Dauer_min", "Session_Start", "Revier_ID")], by = "Revier_ID")
# Missing values for Datum, Session_Start and _Dauer are now replaced:
dat_sex$Session_Dauer_min.x <- ifelse(is.na(dat_sex$Session_Dauer_min.x), dat_sex$Session_Dauer_min.y, dat_sex$Session_Dauer_min.x )
dat_sex$Datum.x <- if_else(is.na(dat_sex$Session_Start_h), dat_sex$Datum.y, dat_sex$Datum.x )
dat_sex$Session_Start.x <- ifelse(is.na(dat_sex$Session_Start.x), dat_sex$Session_Start.y, dat_sex$Session_Start.x )
# The columns that reveived the .x-index during left_join are renamed again:
names(dat_sex) <- gsub(".x", "", names(dat_sex))
# Finally, we prune dat_sexto those columns we need further on:
dat_sex <- dat_sex[, c("Datum", "Session_Start", "Session_Dauer_min", "Revier_ID", "Ortung_ID", "X", "Y", "Geschlecht_Alter", "Verhalten", "Dauer_min_dez", "n")]
if (Select.Region == "Rottenburg" & Select.Year == 2018) {
dat_sex <- dat_sex[, c("Datum", "Session_Start", "Session_Dauer_min", "Revier_ID", "Ortung_ID", "X", "Y", "Geschlecht_Alter", "Verhalten", "Dauer_min_dez", "n", "Kultur")]
}
# Fill NAs in Datum, session Start and Session_Dauer (can occur for territories that never had a complete observation session).
# But check whether these entries make sense!!
dat_sex$Session_Dauer_min <- ifelse(is.na(dat_sex$Session_Dauer_min), 30, dat_sex$Session_Dauer_min)
dat_sex$Session_Start <- ifelse(is.na(dat_sex$Session_Start), 10, dat_sex$Session_Start)
#dat_sex$Datum <- ifelse(is.na(dat_sex$Datum), min(dat_sex$Datum), dat_sex$Datum) # this makes the date column into int, but should be OK (?)
# (2.h) dat_sex must be a spatialPoints data frame to allow the territory delineation below ...
coordinates(dat_sex) <- c("X","Y")
# (2.i) Check your dataset - all looks as expected?
head(dat_sex@data)       #first few rows of table in console: All OK?
str(dat_sex@data)        #data structure: names and identity of columns (numeric, character, factor) with levels etc.
levels(dat_sex$Revier_ID)  #territory IDs that are still included in the analysis
# ---------------------------------------------------#
# (3) Home range calulations ----
# ---------------------------------------------------#
# We first find the column number that conforms to "Revier_ID" in the current dataset (needed below):
column.ID <- which(colnames(dat_sex@data) == "Revier_ID")
# ------------------------------#
# (3a) MCP Kernel intersection homeranges ----
# ------------------------------#
if (Select.TerritoryType == "Kernel_MCP_inter" | Select.TerritoryType == "MCP") {
hr.MCP <- mcp(dat_sex[, column.ID],     #command is performed for each territory separately
percent = Select.Prop.MCP,      #typically, 100% of localizations are considered
unin = "m",         #input in meter (determined by the coordinate system)
unout = "ha")       #output in ha
hr.MCP       #shows the size of each mcp in ha
# For display and later intersection with kernels and localisation points, the MCP homerange gets a narrow buffer
hr.MCP.buff <- gBuffer(hr.MCP,
width = 10,      #10 meter buffer
byid = T,        #function is applied across subgeometries (for each territory)
quadsegs = 5)    #number of line segments to use to approximate a quarter circle
names(hr.MCP.buff)[names(hr.MCP.buff) == "id"] <- "Revier_ID"
hr.MCP.buff@data$Fl_Hr.ha <- raster::area(hr.MCP.buff) / 10000 # This is the relevant Homerange area if MCP is used for territory defintion
# Define the coordinate system of hr.MCP.buff
proj4string(hr.MCP.buff) <- CRS("+init=epsg:31467") # Gauss-Kruger
# export Kernel-MCP-intersection as shapefile
mcp.filename <- paste(Select.StudyArea, Select.Year, "MCP", Select.Prop.MCP, Select.sex, Sys.Date(), sep = "_")
writeOGR(hr.MCP.buff, dsn = ".",
layer = mcp.filename,
driver = "ESRI Shapefile", overwrite = TRUE)
# Visually check the homeranges
plot(hr.MCP.buff, col = "green")            #plots the buffer
plot(hr.MCP, col = "red", add = T)          #adds the mcp to the plot
plot(dat_sex, col = "blue", add = T)        #adds the raw localizations to the plot
# Rename for further data preparation and add homerange areas
Home_range_fin <- hr.MCP.buff
}
if (Select.TerritoryType == "Kernel_MCP_inter") {
# kernel calculation = Choose h and grid to determine the spatial resolution: test and decide individually!
hr.kernel <- kernelUD(dat_sex[, column.ID],      #command is performed for each territory separately
h = 20,      #Smoothing factor h = radius around a grid point; the bigger the more localizations are considered
grid = 200)  #grid; the smaller the less localizations are neglected, ahs no impact on spatial resolution
image(hr.kernel)                        #shows the kernels and their resolution
# Select the Kernels at the specified proportion: consider all localizations, but reduce the area (= density clouds)
hr.kernel.fin <- getverticeshr(hr.kernel,
percent = Select.Prop.Hull)
# Intersect Kernel with MCP
projection(hr.kernel.fin) <- projection(hr.MCP.buff)
hr.MCp_kernel <- raster::intersect(hr.MCP.buff, hr.kernel.fin)
# rows with different contents regarding Revier_ID have to be deleted, otherwise we might get into trouble later
hr.MCp_kernel <- subset(hr.MCp_kernel, subset = hr.MCp_kernel$Revier_ID == hr.MCp_kernel$id)   #subset with just the rows in which the Revier ids are identical
# Rename columns
names(hr.MCp_kernel) <- gsub(".1", "", names(hr.MCp_kernel))
hr.MCp_kernel$Fl_Hr.ha <- raster::area(hr.MCp_kernel) / 10000 # This is the relevant Homerange area if MCP-kernel-intersection is used for territory defintion
# Define the coordinate system of hr.MCp_kernel
proj4string(hr.MCp_kernel) <- CRS("+init=epsg:31467") # Gauss-Kruger
# export Kernel-MCP-intersection as shapefile
kernel.filename <- paste(Select.StudyArea, Select.Year, "Kernel", Select.Prop.Hull,"MCP", Select.Prop.MCP,"intersection", Select.sex, Sys.Date(), sep = "_")
writeOGR(hr.MCp_kernel, dsn = ".",
layer = kernel.filename,
driver = "ESRI Shapefile", overwrite = TRUE)
# Visually check the homeranges
plot(hr.kernel.fin, col = "grey")  #adds the kernel to the plot
plot(hr.MCp_kernel, col = "pink", add = T) #adds the kernel-mcp-intersection to the plot
plot(dat_sex, col = "blue", add = T)        #adds the raw localizations to the plot
# Rename for further data preparation and add homerange areas
Home_range_fin <- hr.MCp_kernel
}
# ------------------------------#
# 3b) Kernel homeranges ----
# ------------------------------#
if (Select.TerritoryType == "Kernel") {
# Choose h and grid to determine the spatial resolution: test and decide individually!
hr.kernel <- kernelUD(dat_sex[, column.ID],      #command is performed for each territory separately
h = 20,      #Smoothing factor h = radius around a grid point; width of the curve above each point;
#the bigger the more localizations are considered at once, which can mask the structure of the data
#just h has an influence on area size
grid = 200)  #controls the resolution and the extent of the grid
#the smaller the less localizations are neglected
image(hr.kernel)                        #shows the kernels and their resolution
# Select the Kernels at the specified proportion: consider all localizations, but reduce the area (= density clouds)
hr.kernel.fin <- getverticeshr(hr.kernel,
percent = Select.Prop.Hull)
# Rename columns
names(hr.kernel.fin) <- gsub(".1", "", names(hr.kernel.fin))
names(hr.kernel.fin)[names(hr.kernel.fin) == "id"] <- "Revier_ID"
hr.kernel.fin$Fl_Hr.ha <- raster::area(hr.kernel.fin) / 10000 # This is the relevant Homerange area if MCP-kernel-intersection is used for territory defintion
# Define the coordinate system of hr.kernel.fin
proj4string(hr.kernel.fin) <- CRS("+init=epsg:31467") # Gauss-Kruger
# export Kernel-MCP-intersection as shapefile
kernel.filename <- paste(Select.StudyArea, Select.Year, "Kernel", Select.Prop.Hull, Select.sex, Sys.Date(), sep = "_")
writeOGR(hr.kernel.fin, dsn = ".",
layer = kernel.filename,
driver = "ESRI Shapefile", overwrite = TRUE)
# Visually check the homeranges
plot(hr.kernel.fin, col = "grey")  #adds the kernel to the plot
plot(dat_sex, col = "blue", add = T)        #adds the raw localizations to the plot
# Rename for further data preparation and add homerange areas
Home_range_fin <- hr.kernel.fin           # rename the data set
}
# ---------------------------------------------------#
# (4) Extract cultures within home ranges and at their associated localisations ----
# ---------------------------------------------------#
# (4.a) Culture areas per home range
# We first intersect Home_range_fin with the culture shape:
shp.Cult <- readOGR(dsn = ".", layer = FileName.Cultures)
projection(Home_range_fin) <- projection(shp.Cult)
# ------------------#
# Some shapes generate issues with "orphaned holes". The following 0-width buffer is a trick that helps in many cases.
# If it doesn't, see solutions that directly fix geometry issues posted here:
# ... https://gis.stackexchange.com/questions/113964/fixing-orphaned-holes-in-r
# ... with link to package "cleangeo"
Home_range_fin <- gBuffer(Home_range_fin, byid = T, width = 0)
shp.Cult <- gBuffer(shp.Cult, byid = T, width = 0)
# ------------------#
plot(shp.Cult)
Home_range_Cult <- raster::intersect(Home_range_fin, shp.Cult)
plot(Home_range_Cult, col = "grey", add = TRUE) # check whether this looks as expected
# ... and then calculate area coverage [m?] per culture per home range ----
Home_range_Cult$Fl_Ku_Hr.m2 <- raster::area(Home_range_Cult) #area per culture in m2
# CHECK: "sum" areas here  ...
dplyr::summarize(group_by(Home_range_Cult@data,
Revier_ID),
sum = sum(Fl_Ku_Hr.m2)/10000)
# ... should correspond to "Fl_Hr.ha" here:
Home_range_fin
# (4.b) Cultures at each localisation
# We first intersect localizations with Home_range_Cult, to restrict to those localizations contained within home ranges
# Home_range_Cult <- gBuffer(Home_range_Cult, byid = T, width = 0)
projection(dat_sex) <- projection(Home_range_Cult)
Loc_home_range_Cult <- raster::intersect(dat_sex, Home_range_Cult) #important order: first dat_sex, then Home_range_Cult
plot(Loc_home_range_Cult, col = "blue", add = T)
dat <- as.data.frame(Loc_home_range_Cult) #transform the data set from a spatial data frame into a data frame for further work
# Revier_ID and Revier_ID.1 differ in cases where birds from different territories shared a single  Ortung_ID.
# Therefore, we keep just rows with same values in columns "Revier_ID" and "Revier_ID.1"
dat <- subset(dat, subset = dat$Revier_ID == dat$Revier_ID.1) # the number of observations CANNOT exceed that in dat_sex - check!
# We prune dat to the columns needed for further analyes:
dat <- dat[, c("Datum",
"Session_Start",
"Session_Dauer_min",
"Revier_ID",
"Ortung_ID",
"X", "Y",
"Geschlecht_Alter",
"Verhalten",
"Dauer_min_dez",
"Kultur",
"n")] #not needed "Fl_Ku_UG", "Fl_Ku_Hr.m2","Fl_Hr.ha",
# ---------------------------------------------------#
# (5) Generate new variables, add culture categories, remove unused cultures ----
# ---------------------------------------------------#
# (5.0) Prune dataset to selected behaviours:
if (Select.Behaviour == "foraging") {
dat <- subset(dat, dat$Verhalten == "I - Insektensuche Nestlinge"
| dat$Verhalten == "N - Nahrungsuche Eigenbedarf"
| dat$Verhalten == "B - br?tet"
| dat$Verhalten == "F - f?ttert"
| dat$Verhalten == "M - NestMaterial-Eintrag"
| dat$Verhalten == "E - NEst")
}
# (5.1) In case of behaviour = "foraging" prune to territories that exceed minimum sample size...
# ... for habitat use within territories (Select.MinSample.reg):
# We first Calculate the new no. of observations per territory:
#if (Select.Behaviour == "foraging") {
#  N_data_territory_new <- dat %>% dplyr::count(Revier_ID)
#  dat <- left_join(dat, N_data_territory_new, by = "Revier_ID")
#  dat <- subset(dat, subset = dat$nn >= Select.MinSample.reg)
#  dat$Revier_ID <- droplevels(dat$Revier_ID)
#  levels(dat$Revier_ID)
#}
#if dat = 0 try the next command instead of the one before (but repeat the ~5 commands before):
if (Select.Behaviour == "foraging") {
N_data_territory_new <- dat %>% dplyr::count(Revier_ID)
dat <- left_join(dat, N_data_territory_new, by = "Revier_ID")
dat <- subset(dat, subset = dat$n.y >= Select.MinSample.reg)
dat$Revier_ID <- droplevels(dat$Revier_ID)
levels(dat$Revier_ID)
}
# (5.2) Add culture categories to dat (observations) and to Home_range_Cult (culture shape for homeranges)
df.cultures <- read_xlsx("Kulturtypen und -kategorien_2020.04.22.xlsx")
# First, to dat:
dat <- left_join(dat, df.cultures, by = "Kultur")   #both tables are merged by the column Kultur
dat$Kulturkategorie <- as.factor(dat$Kulturkategorie)
# Second, to Home_range_Cult:
Home_range_Cult <- data.frame(Home_range_Cult)
Home_range_Cult <- left_join(Home_range_Cult, df.cultures, by = "Kultur")
Home_range_Cult$Kulturkategorie <- factor(Home_range_Cult$Kulturkategorie)
# (5.6) Cultures that are present in the home ranges but not used by the birds should be added (= 0 localizations)
levels(Home_range_Cult$Kulturkategorie) # lists the cultures present in any of the homeranges ...
levels(dat$Kulturkategorie) # ... but only a subset of those may have been visited by birds. We need to fill this gap!
# First, we have to refer to the territories with more than Select.MinSample.reg (dependening on the Select.Behaviour)
if (Select.Behaviour == "all") {
Home_range_Cult <- left_join(Home_range_Cult, N_data_territory, by = ("Revier_ID"))
Home_range_Cult <- subset(Home_range_Cult, subset = Home_range_Cult$n >= Select.MinSample.reg)
Home_range_Cult$Revier_ID <- factor(Home_range_Cult$Revier_ID)
}
if (Select.Behaviour == "foraging") {
Home_range_Cult <- left_join(Home_range_Cult, N_data_territory_new, by = ("Revier_ID"))
Home_range_Cult <- subset(Home_range_Cult, subset = Home_range_Cult$n >= Select.MinSample.reg)
Home_range_Cult$Revier_ID <- factor(Home_range_Cult$Revier_ID)
}
# Second, we identify which cultures spatially exist in each territory:
exists.Revier_Culture <- dplyr::summarize(group_by(Home_range_Cult,
Revier_ID,
Kulturkategorie))
# Third, we identify which observation sessions exist in each territory
exists.Revier_Datum_Session <- dplyr::summarize(group_by(dat,
Revier_ID,
Datum,
Session_Start,
Session_Dauer_min))
# Fourth, we merge these two, generating ALL combinations of cultures, territories, and observation sessions:
df.exists <- left_join(exists.Revier_Culture, exists.Revier_Datum_Session, by = "Revier_ID")
# Fifth, the actual observation data are merged into this dataframe. N rows increase when a given session has > 1 record on a given culture category!
dat.final <- left_join(df.exists, dat, by = c("Datum","Kulturkategorie","Revier_ID", "Session_Start", "Session_Dauer_min"))
# Add the sum area per culture category (KK!! - not just Ku!) to these data:
Home_range_Cult.per.hr <- dplyr::summarise(group_by(Home_range_Cult,
Revier_ID,
Kulturkategorie),
Fl_Kk_Hr.m2 = sum(Fl_Ku_Hr.m2)) #sum of area per culture category per home range in m?
# Assign the sum of area per culture category per home range to the data set
dat.final <- left_join(dat.final, Home_range_Cult.per.hr, by = c("Revier_ID", "Kulturkategorie"))
# Dauer_min_dez = NA is set to zero (= culture that are existent within the home range but never used)
dat.final$Dauer_min_dez[is.na(dat.final$Dauer_min_dez)] <- 0
# Complete in dat.final the total area per territory (Fl_Hr.ha)
dat.final <- left_join(dat.final, Home_range_fin@data[, c("Revier_ID", "Fl_Hr.ha")], by = "Revier_ID")
dat.final$Revier_ID <- factor(dat.final$Revier_ID)
levels(dat.final$Revier_ID)
# -----------------------------------#
# (6) Final detail and data export ----
# -----------------------------------#
# Cultures that were never used in any single home range while foraging are deleted
if (Select.Behaviour == "foraging") {
Nie_Genutzt <- summarise(group_by(dat.final,
Kulturkategorie),
Dau_Ku_sum = sum(Dauer_min_dez))
dat.final <- left_join(dat.final, Nie_Genutzt, by = "Kulturkategorie")
dat.final <- subset(dat.final, subset = dat.final$Dau_Ku_sum != "0")
# After removal of these cultures, territory areas need to be adjusted (they are now smaller!!)
Hr.area.corr <- summarize(group_by(dat.final, Revier_ID, Datum, Session_Start, Kulturkategorie),
Fl_Kk_Hr.m2 = max(Fl_Kk_Hr.m2),
Fl_Hr.ha = max(Fl_Hr.ha))
Hr.area.corr <- summarize(group_by(Hr.area.corr, Revier_ID, Datum, Session_Start),
Hr.area.ha.new = sum(Fl_Kk_Hr.m2)/10000,
Hr.area.ha.alt = max(Fl_Hr.ha))
dat.final <- left_join(dat.final, Hr.area.corr, by = c("Revier_ID", "Datum", "Session_Start"))
dat.final$Fl_Hr.ha <- dat.final$Hr.area.ha.new
}
# sometimes also necesssary for males (behaviour = all) if model convergence problems in script 3
# cultures that were never used in all home ranges while foraging are deleted
#if (Select.Behaviour == "all") {
#  Nie_Genutzt <- summarise(group_by(dat.final,
#                                    Kulturkategorie),
#                           Dau_Ku_sum = sum(Dauer_min_dez))
#  dat.final <- left_join(dat.final, Nie_Genutzt, by = "Kulturkategorie")
#  dat.final <- subset(dat.final, subset = dat.final$Dau_Ku_sum != "0")
# After removal of these cultures, territory areas need to be adjusted (they are now smaller!!)
#  Hr.area.corr <- summarize(group_by(dat.final, Revier_ID, Datum, Session_Start, Kulturkategorie),
#                            Fl_Kk_Hr.m2 = max(Fl_Kk_Hr.m2),
#                            Fl_Hr.ha = max(Fl_Hr.ha))
#  Hr.area.corr <- summarize(group_by(Hr.area.corr, Revier_ID, Datum, Session_Start),
#                            Hr.area.ha.new = sum(Fl_Kk_Hr.m2)/10000,
#                            Hr.area.ha.alt = max(Fl_Hr.ha))
#  dat.final <- left_join(dat.final, Hr.area.corr, by = c("Revier_ID", "Datum", "Session_Start"))
#  dat.final$Fl_Hr.ha <- dat.final$Hr.area.ha.new
#}
# Save as csv
csv.name <- paste(Select.StudyArea, "Verortungen", Select.Year, Select.TerritoryType, Select.Prop.Hull, Select.sex, Select.Behaviour, Sys.Date(), sep = "_")
write.csv2(dat.final, paste(csv.name, ".csv", sep = ""))
citation
citation()
citation(rgeos)
citation("glmmTMB")
citation("rgeos")
citation()
citation ("adehabitatHR")
citation("raster")
sp
citation(sp)
library(sp)                       # commands for spatial data
citation(sp)
citation(package = "sp")
citation(package = "raster")
citation(package = "sp")
citation(package = "tweedie")
citation(package = "glmm TMB")
citation(package = "glmmTMB")
install.packages(c("tidyverse", "here", "viridis","lme4", "emmeans", "car", "MuMIn", "corrr", "GGally", "agricolae"))
library(lme4)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
version
.libPaths()
install.packages("tidyverse")
library(tidyverse)
install.packages("backports")
library(tidyverse)
library(lme4)
library(viridis)
library(emmeans)
1+1
library(lme4)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(lme4)
library(Matrix)
library(lme4)
library(viridis)
library(emmeans)
library(car)
library(MuMIn)
library(corrr)
library(agricolae)
library(GGally)
library(dplyr)
library(tidyverse)
install.packages(c("tidyverse", "here", "viridis","lme4", "emmeans", "car", "MuMIn", "corrr", "GGally", "agricolae"))
install.packages(c("tidyverse", "here", "viridis","lme4", "emmeans", "car", "MuMIn", "corrr", "GGally", "agricolae"))
library(tidyverse)
library(here)
library(viridis)
library(lme4)
library(emmeans)
library(car)
library(MuMIn)
library(corrr)
library(GGally)
library(agricolae)
.lipPaths
.libPaths()
